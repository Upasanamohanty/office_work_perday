"use client";

import React, { useState } from "react";

const images = [
  "/images/cleaning1.jpg",
  "/images/cleaning2.jpg",
  "/images/cleaning3.jpg",
  "/images/cleaning4.jpg",
];

const ImageSlider = () => {
  const [selectedImage, setSelectedImage] = useState(images[0]);
  const [startIndex, setStartIndex] = useState(0);
  const visibleThumbnails = 3;

  const scrollUp = () => {
    if (startIndex > 0) setStartIndex(startIndex - 1);
  };

  const scrollDown = () => {
    if (startIndex < images.length - visibleThumbnails) setStartIndex(startIndex + 1);
  };

  const handleKeyDown = (e) => {
    if (e.key === "ArrowUp") {
      scrollUp();
    } else if (e.key === "ArrowDown") {
      scrollDown();
    }
  };

  return (
    <div className="flex flex-col items-center mt-4 md:mt-6 lg:mt-[6vw]">
      <h1 className="text-xl font-bold">View Service</h1>
      <div
        className="relative flex flex-col bg-white p-[1rem] rounded-[2vw] shadow-lg mt-4 w-full md:w-[70.5rem] lg:w-[70.5rem]"
        style={{
          height: "25.625rem",
          gap: "0.68rem",
        }}
        onKeyDown={handleKeyDown}
        tabIndex={0}
      >
        <h2 className="text-lg font-semibold mb-[0.5rem] text-center">Product Image</h2>
        <div className="flex flex-col gap-[1vw] items-center justify-center h-full md:flex-row md:gap-[1vw] md:w-[100%] lg:h-full">
          <div className="w-[65%] h-full flex items-center justify-center md:w-[60%] lg:w-[65%]">
            <img
              src={selectedImage}
              alt="Product"
              className="w-full h-full object-cover rounded-[2vw]"
            />
          </div>
          <div className="flex flex-col items-center justify-between w-[15%] h-full p-[0.5rem] border border-gray-300 rounded-[1vw] md:w-[20%] lg:w-[15%]">
            <button
              onClick={scrollUp}
              disabled={startIndex === 0}
              aria-label="Scroll up"
              className={`p-[0.5rem] bg-gray-300 rounded-full ${startIndex === 0 ? "opacity-50 cursor-not-allowed" : ""}`}
            >
              ‚ñ≤
            </button>
            <div className="flex flex-col gap-[0.5vw] items-center overflow-hidden">
              {images.slice(startIndex, startIndex + visibleThumbnails).map((image, index) => (
                <img
                  key={index}
                  src={image}
                  alt={`Thumbnail ${index + 1}`}
                  className={`w-[4vw] h-[4vw] object-cover rounded-[1vw] cursor-pointer border-2 ${
                    selectedImage === image ? "border-blue-500" : "border-transparent"
                  }`}
                  onClick={() => setSelectedImage(image)}
                />
              ))}
            </div>
            <button
              onClick={scrollDown}
              disabled={startIndex >= images.length - visibleThumbnails}
              aria-label="Scroll down"
              className={`p-[0.5rem] bg-gray-300 rounded-full ${startIndex >= images.length - visibleThumbnails ? "opacity-50 cursor-not-allowed" : ""}`}
            >
              ‚ñº
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

const ServiceInfoCard = () => {
  const [serviceName, setServiceName] = useState("Home Cleaning");
  const [duration, setDuration] = useState("2 Hrs");
  const [category, setCategory] = useState("Cleaning Service");
  const [status, setStatus] = useState("Active");
  const [cost, setCost] = useState("$30");
  const [description, setDescription] = useState(
    "Are you looking for basic details about starting a cleaning service, or do you need a description for an existing cleaning service? Let me know what you need, and I can help! üòä"
  );

  return (
    <div
      className="w-full md:w-[70.5rem] lg:w-[70.5rem] h-[28.25rem] bg-white shadow-lg rounded-[0.75rem] p-[1.5rem] border border-gray-200 mt-10 md:mt-12"
      style={{ marginLeft: "auto", marginRight: "auto" }}
    >
      <h2 className="text-xl font-semibold mb-4">General Information</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 gap-[0.875rem]">
        <div>
          <label className="text-gray-500 text-sm">Service Name</label>
          <input
            type="text"
            className="border p-[0.625rem] rounded bg-gray-100 w-full"
            value={serviceName}
            onChange={(e) => setServiceName(e.target.value)}
          />
        </div>
        <div>
          <label className="text-gray-500 text-sm">Duration</label>
          <input
            type="text"
            className="border p-[0.625rem] rounded bg-gray-100 w-full"
            value={duration}
            onChange={(e) => setDuration(e.target.value)}
          />
        </div>
        <div>
          <label className="text-gray-500 text-sm">Category</label>
          <input
            type="text"
            className="border p-[0.625rem] rounded bg-gray-100 w-full"
            value={category}
            onChange={(e) => setCategory(e.target.value)}
          />
        </div>
        <div>
          <label className="text-gray-500 text-sm">Status</label>
          <input
            type="text"
            className="border p-[0.625rem] rounded bg-gray-100 w-full"
            value={status}
            onChange={(e) => setStatus(e.target.value)}
          />
        </div>
        <div>
          <label className="text-gray-500 text-sm">Cost</label>
          <input
            type="text"
            className="border p-[0.625rem] rounded bg-gray-100 w-full"
            value={cost}
            onChange={(e) => setCost(e.target.value)}
          />
        </div>
      </div>
      <div className="mt-4">
        <label className="text-gray-500 text-sm">Service Description</label>
        <textarea
          className="border p-[0.625rem] rounded bg-gray-100 w-full"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
      </div>
    </div>
  );
};

const PackageList = () => {
  const [packages, setPackages] = useState([
    { name: "Deep Cleaning", duration: "2 Hrs", price: "$10" },
    { name: "Window Cleaning", duration: "2 Hrs", price: "$10" },
  ]);

  const handleEdit = (index) => {
    const newName = prompt("Enter new package name", packages[index].name);
    if (newName) {
      setPackages((prevPackages) => {
        const updatedPackages = [...prevPackages];
        updatedPackages[index].name = newName;
        return updatedPackages;
      });
    }
  };

  return (
    <div
      className="w-full md:w-[70.5rem] lg:w-[70.5rem] h-[25.625rem] bg-white shadow-lg rounded-[0.75rem] p-[1.5rem] border border-gray-200 mt-10 md:mt-12"
      style={{ marginLeft: "auto", marginRight: "auto" }}
    >
      <h2 className="text-xl font-semibold mb-4">Packages</h2>
      {packages.map((pkg, index) => (
        <div
          key={index}
          className="border-b last:border-b-0 py-4 flex justify-between items-center"
        >
          <div>
            <h3 className="text-lg font-semibold">{pkg.name}</h3>
            <p className="text-gray-600 text-sm">
              Are you looking for basic details about starting a cleaning service, or do you need a description for an existing cleaning service? Let me know what you need, and I can help!
            </p>
            <span className="text-sm font-semibold mt-2 block">{pkg.duration}</span>
          </div>
          <div className="flex items-center gap-4">
            <span className="text-purple-600 font-bold text-lg">{pkg.price}</span>
            <button
              className="bg-gray-200 p-2 rounded"
              onClick={() => handleEdit(index)}
            >
              ‚úèÔ∏è
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

const ServicePage = () => {
  return (
    <div className="w-full px-4 md:px-6">
      <ImageSlider />
      <ServiceInfoCard />
      <PackageList />
    </div>
  );
};

export default ServicePage;
