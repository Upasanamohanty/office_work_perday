"use client";

import React, { useState } from "react";

const images: string[] = [
  "/images/cleaning1.jpg",
  "/images/cleaning2.jpg",
  "/images/cleaning3.jpg",
  "/images/cleaning4.jpg",
];

const ImageSlider: React.FC = () => {
  const [selectedImage, setSelectedImage] = useState<string>(images[0]);
  const [startIndex, setStartIndex] = useState<number>(0);
  const visibleThumbnails: number = 3;
  const sliderRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    sliderRef.current?.focus();
  }, []);

  const scrollUp = (): void => {
    if (startIndex > 0) {
      setStartIndex((prev: number) => prev - 1);
    }
  };

  const scrollDown = (): void => {
    if (startIndex < images.length - visibleThumbnails) {
      setStartIndex((prev: number) => prev + 1);
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>): void => {
    e.preventDefault();
    switch (e.key) {
      case "ArrowUp":
        scrollUp();
        break;
      case "ArrowDown":
        scrollDown();
        break;
      case "ArrowLeft":
        setSelectedImage(images[Math.max(images.indexOf(selectedImage) - 1, 0)]);
        break;
      case "ArrowRight":
        setSelectedImage(images[Math.min(images.indexOf(selectedImage) + 1, images.length - 1)]);
        break;
    }
  };

  return (
    <div>
      
      <div
        className="absolute flex items-center justify-center font-bold"
        style={{w: "12.125rem", h: "3.875rem", top: "8rem", left: "16.5rem", }}
      >
        <h1 className="text-xl">View Service</h1>
      </div>

      <div
        ref={sliderRef}
        className="relative flex flex-col bg-white p-4 rounded-[2vw] shadow-lg outline-none"
        style={{top: "13.375rem", left: "16.5rem", w: "70.5625rem", h: "25.375rem", }}
        onKeyDown={handleKeyDown}
        tabIndex={0}
        aria-label="Image slider"
      >
        <h2 className="mb-2 text-center text-lg font-semibold">Product Image</h2>
        <div className="flex h-full items-center justify-center gap-6">
          {/* Main Image */}
          <div className="flex h-full w-[65%] items-center justify-center">
            <img
              src={selectedImage}
              alt={`Selected product image ${images.indexOf(selectedImage) + 1}`}
              className="h-full w-full rounded-[2vw] object-cover"
              loading="lazy"
            />
          </div>

         
          <div className="flex h-full w-[15%] flex-col items-center justify-between rounded-[1vw] border border-gray-300 p-2">
            <button
              onClick={scrollUp}
              disabled={startIndex === 0}
              aria-label="Scroll thumbnails up"
              className="rounded-full bg-gray-300 p-2 transition-opacity hover:bg-gray-400 disabled:opacity-50 disabled:hover:bg-gray-300"
            >
              ‚ñ≤
            </button>
            <div className="my-2 flex flex-col items-center gap-6 overflow-hidden">
              {images
                .slice(startIndex, startIndex + visibleThumbnails)
                .map((image: string, index: number) => (
                  <button
                    key={index}
                    className="focus:outline-none"
                    onClick={() => setSelectedImage(image)}
                    aria-label={`Select image ${startIndex + index + 1}`}
                  >
                    <img
                      src={image}
                      alt={`Thumbnail ${startIndex + index + 1}`}
                      className={`h-[3.75rem] w-[3.75rem] cursor-pointer rounded-[1vw] border-2 object-cover transition-all hover:border-blue-300 ${
                        selectedImage === image ? "border-blue-500" : "border-transparent"
                      }`}
                      loading="lazy"
                    />
                  </button>
                ))}
            </div>
            <button
              onClick={scrollDown}
              disabled={startIndex >= images.length - visibleThumbnails}
              aria-label="Scroll thumbnails down"
              className="rounded-full bg-gray-300 p-2 transition-opacity hover:bg-gray-400 disabled:opacity-50 disabled:hover:bg-gray-300"
            >
              ‚ñº
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

const ServiceInfoCard = () => {
  const [serviceName, setServiceName] = useState("Home Cleaning");
  const [duration, setDuration] = useState("2 Hrs");
  const [category, setCategory] = useState("Cleaning Service");
  const [status, setStatus] = useState("Active");
  const [cost, setCost] = useState("$30");
  const [description, setDescription] = useState(
    "Are you looking for basic details about starting a cleaning service, or do you need a description for an existing cleaning service? Let me know what you need, and I can help! üòä"
  );

  return (
    <div
      className="w-[70.5rem] h-[28.25rem] bg-white shadow-lg rounded-[0.75rem] p-[1.5rem] border border-gray-200"
      style={{ marginTop: "33.333vw", marginLeft: "13.75vw" }}
    >
      <h2 className="text-xl font-semibold mb-4">General Information</h2>
      <div className="grid grid-cols-2 gap-[0.875rem]">
        <div>
          <label className="text-gray-500 text-sm">Service Name</label>
          <input 
            type="text" 
            className="border p-[0.625rem] rounded bg-gray-100 w-full" 
            value={serviceName} 
            onChange={(e) => setServiceName(e.target.value)} 
          />
        </div>
        <div>
          <label className="text-gray-500 text-sm">Duration</label>
          <input 
            type="text" 
            className="border p-[0.625rem] rounded bg-gray-100 w-full" 
            value={duration} 
            onChange={(e) => setDuration(e.target.value)} 
          />
        </div>
        <div>
          <label className="text-gray-500 text-sm">Category</label>
          <input 
            type="text" 
            className="border p-[0.625rem] rounded bg-gray-100 w-full" 
            value={category} 
            onChange={(e) => setCategory(e.target.value)} 
          />
        </div>
        <div>
          <label className="text-gray-500 text-sm">Status</label>
          <input 
            type="text" 
            className="border p-[0.625rem] rounded bg-gray-100 w-full" 
            value={status} 
            onChange={(e) => setStatus(e.target.value)} 
          />
        </div>
        <div>
          <label className="text-gray-500 text-sm">Cost</label>
          <input 
            type="text" 
            className="border p-[0.625rem] rounded bg-gray-100 w-full" 
            value={cost} 
            onChange={(e) => setCost(e.target.value)} 
          />
        </div>
      </div>
      <div className="mt-4">
        <label className="text-gray-500 text-sm">Service Description</label>
        <textarea 
          className="border p-[0.625rem] rounded bg-gray-100 w-full" 
          value={description} 
          onChange={(e) => setDescription(e.target.value)} 
        />
      </div>
    </div>
  );
};

const PackageList = () => {
  const [packages, setPackages] = useState([
    { name: "Deep Cleaning", duration: "2 Hrs", price: "$10" },
    { name: "Window Cleaning", duration: "2 Hrs", price: "$10" }
  ]);

  const handleEdit = (index) => {
    const newName = prompt("Enter new package name", packages[index].name);
    if (newName) {
      setPackages((prevPackages) => {
        const updatedPackages = [...prevPackages];
        updatedPackages[index].name = newName;
        return updatedPackages;
      });
    }
  };

  return (
    <div
      className="w-[70.5rem] h-[25.625rem] bg-white shadow-lg rounded-[0.75rem] p-[1.5rem] border border-gray-200 mt-10"
      style={{ marginLeft: "13.75vw" }}
    >
      <h2 className="text-xl font-semibold mb-4">Packages</h2>
      {packages.map((pkg, index) => (
        <div key={index} className="border-b last:border-b-0 py-4 flex justify-between items-center">
          <div>
            <h3 className="text-lg font-semibold">{pkg.name}</h3>
            <p className="text-gray-600 text-sm">Are you looking for basic details about starting a cleaning service, or do you need a description for an existing cleaning service? Let me know what you need, and I can help!</p>
            <span className="text-sm font-semibold mt-2 block">{pkg.duration}</span>
          </div>
          <div className="flex items-center gap-4">
            <span className="text-purple-600 font-bold text-lg">{pkg.price}</span>
            <button 
              className="bg-gray-200 p-2 rounded"
              onClick={() => handleEdit(index)}
            >
              ‚úèÔ∏è
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

const ServicePage = () => {
  return (
    <div>
      <ServiceInfoCard />
      <PackageList />
    </div>
  );
};

export default ServicePage;
